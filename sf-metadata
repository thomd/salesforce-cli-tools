#!/usr/bin/env bash

#
# Download metadata of all or of specific Salesforce metadata types as xml files
#
# USAGE
#
#    sf-metadata                               # retrieve all metadata
#    sf-metadata -o ORG                        # retrieve all metadata from ORG
#    sf-metadata -m NAME1 -m NAME2             # retrieve metadata of type NAME1 and NAME2
#    sf-metadata -x                            # retrieve only metadata declared in manifest/package.xml
#    sf-metadata -p                            # create minimal empty SFDX-project before retrieval
#
# EXAMPLES
#
#    sf-metadata -p -o org_1; sf-metadata -p -o org_2; diff -qr org_1 org_2
#
# COMMANDS
#
#    sf org list metadata-types -o ORG | jq -r '.metadataObjects[].xmlName'
#    sf project retrieve start -o ORG -m NAME:MEMBER
#
#    echo '{"packageDirectories": [{"path": "force-app"}]}' > sfdx-project.json; mkdir force-app;
#    while read name; do sf project retrieve start -m $name; done < <(sf org list metadata-types | jq -r '.metadataObjects[].xmlName')

yesno() {
  echo ""
  read -p "$1 [Y/n] " response
  [[ $response == "n" || $response == "N" ]] && exit 1
}

show_help() {
  awk '/^[^ #]/{c=1}c==0{print $0}' $0 | sed -n '/^#/p' | sed 1d | sed 's/^#/ /g' \
    | perl -pe "s/ #(.*)$/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/(USAGE|EXAMPLES|COMMANDS)/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/\`(.+)\`/$(tput sgr 0 1)\1$(tput sgr 0)/"
  exit 1
}

setTargetOrg() {
  if [[ -z "$org" ]]; then
    org=$(cat .sf/config.json 2>/dev/null | jq -r '."target-org" | select( . != null )')
  fi
  if [[ -z "$org" ]]; then
    org=$(cat ~/.sf/config.json 2>/dev/null | jq -r '."target-org" | select( . != null )')
  fi
  if [[ -z "$org" ]]; then
    echo -e >&2 "\n $(tput setaf 1)Missing target org$(tput sgr 0)\n\n   Either provide with $(tput setaf 0)-o$(tput sgr 0) option, or set via $(tput setaf 0)sf config set target-org <org>$(tput sgr 0)"
    exit 1
  fi
}

org=""
name=""
names_list=$(mktemp)
project=false

while [ $# -gt 0 ]; do
  case $1 in
    -o)
      shift
      org=$1
      ;;
    -m)
      shift
      if [[ $name == "" ]]; then
        name=$1
      else
        name="${name},${1}"
      fi
      ;;
    -p)
      project=true
      ;;
    -h)
      show_help
      ;;
    *)
      ;;
  esac
  shift
done
setTargetOrg

if [[ ! -f "./sfdx-project.json" ]] && [[ $project == true ]]; then
  mkdir -p "${org}/force-app"
  cd "$org"
  echo '{"packageDirectories": [{"path": "force-app"}]}' > sfdx-project.json
fi

if [[ ! -f "./sfdx-project.json" ]]; then
  echo -e >&2 "\n $(tput setaf 1)not a SFDX project$(tput sgr0)"
  exit 1
fi

if [[ $name == "" ]]; then
  name="all"
  [[ $DEBUG == "1" ]] && echo -e "\n   $(tput setaf 0)sf org list metadata-types -o ${org} | jq -r '.metadataObjects[].xmlName'$(tput sgr0)"
  yesno " Retrieve $(tput setaf 4)${name}$(tput sgr0) metadata from $(tput setaf 1)${org}$(tput sgr0) ?"
else
  names=$(echo ${name} | perl -pe "s/,/, /g" | perl -pe "s/(\w+)/$(tput setaf 4)\1$(tput sgr0)/g")
  [[ $DEBUG == "1" ]] && echo -e "\n   $(tput setaf 0)sf project retrieve start -o ${org} -m ${name//,/ -m }$(tput sgr0)"
  yesno " Retrieve metadata ${names} from $(tput setaf 1)${org}$(tput sgr0) ?"
fi

if [[ $name == "all" ]]; then
  sf org list metadata-types -o ${org} \
    | jq -r '.metadataObjects[].xmlName' \
    | sed /ProcessFlowMigration/d \
    | sed /EventRelayConfig/d \
    | sed /ExperienceContainer/d \
    | sed /SearchCustomization/d \
    | sed /RegisteredExternalService/d \
    | sed /PortalDelegablePermissionSet/d \
    | sort \
    > ${names_list}
else
  echo ${name} | tr -d ' ' | tr ',' '\n' > ${names_list}
fi

total=$(cat ${names_list} | wc -l | tr -d ' ')
c=0
while read n; do
  c=$((c+1))
  echo -e "\n $(tput setaf 8)[${c}/${total}]$(tput sgr0) $(tput setaf 4)${n}$(tput sgr0)"
  sf project retrieve start -o ${org} -m ${n} > /dev/null
done < <(cat ${names_list})

