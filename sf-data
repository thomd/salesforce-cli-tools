#!/usr/bin/env bash

#
# Download data of all or of specific Salesforce objects as csv files
#
# USAGE
#
#    sf-data                                         # download all data
#    sf-data -o ORG                                  # download from ORG
#    sf-data -d DIR                                  # save data in DIR folder [default: .data]. Can not be set if you are in the default folder
#    sf-data -s OBJECT                               # download OBJECT
#    sf-data -s OBJECT -i ID                         # download only records ID of OBJECT
#    sf-data -v OBJECT                               # download OBJECT and open in Visidata
#    sf-data -x                                      # download data without time-related system fields
#
#    sf-data -g                                      # list groups
#    sf-data -s OBJECT_1 -s OBJECT_2 -g GROUP        # download OBJECT_1 and OBJECT_2 and store object names in group GROUP
#    sf-data -g GROUP_1 -g GROUP_2                   # download objects of group GROUP_1 and GROUP_2
#    sf-data -G                                      # delete all groups
#    sf-data -G group                                # delete group GROUP
#
# EXAMPLES
#
#    sf-data -s Account -d .
#    sf-data -s Account -s Contact
#
# COMMANDS
#
#    sf sobject list -s all -o ORG
#
#    sf sobject describe -s OBJECT -o ORG | jq -r '.fields[].name' | paste -sd, -
#    sf data query -q "select FIELDS from OBJECT" -o ORG
#
#    obj="Account"; sf data query -q "select $(sf sobject describe -s $obj | jq -r '.fields[].name' | paste -sd, -) from $obj" -r csv > $obj.csv
#
#    rm /tmp/sf-data.objects                 # delete cached objects for bash-completion
#

yesno() {
  echo ""
  read -r -p " $1 [Y/n] " response
  [[ $response == "n" || $response == "N" ]] && exit 1
}

show_help() {
  # shellcheck disable=SC2086
  awk '/^[^ #]/{c=1}c==0{print $0}' $0 | sed -n '/^#/p' | sed 1d | sed 's/^#/ /g' \
    | perl -pe "s/ #(.*)$/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/(USAGE|EXAMPLES|COMMANDS)/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/\`(.+)\`/$(tput sgr 0 1)\1$(tput sgr 0)/"
  exit 1
}

print_error_and_exit() {
  [ -n "$1" ] && echo -e >&2 "\n  $(tput setaf 1)${1}$(tput sgr0)\n"
  exit 1
}


setTargetOrg() {
  if [[ -z "$org" ]]; then
    org=$(cat .sf/config.json 2>/dev/null | jq -r '."target-org" | select( . != null )')
  fi
  if [[ -z "$org" ]]; then
    org=$(cat ~/.sf/config.json 2>/dev/null | jq -r '."target-org" | select( . != null )')
  fi
  if [[ -z "$org" ]]; then
    echo -e >&2 "\n $(tput setaf 1)Missing target org$(tput sgr 0)\n\n   Either provide with $(tput setaf 0)-o$(tput sgr 0) option, or set via $(tput setaf 0)sf config set target-org <org>$(tput sgr 0)"
    exit 1
  fi
}

org=""
default_target=".data"
target=$default_target
object=""
salesforce_id=""
visidata=0
listfile=$(mktemp)
group_names=""
list_groups=0
delete_group=0
group_folder="$HOME/.config/sf-data/groups"
mkdir -p $group_folder

while [ $# -gt 0 ]; do
  case $1 in
    -o|--org)
      shift
      org=$1
      ;;
    -g|--group)
      shift
      if [ -z "$1" ]; then
        [ "$group_names" == "" ] && list_groups=1
      else
        if [ "$group_names" == "" ]; then
          group_names=$1
        else
          group_names="${group_names},${1}"
        fi
      fi
      ;;
    -i|--id)
      shift
      salesforce_id=" WHERE ID = '${1}'"
      ;;
    -G|--delete-group)
      shift
      delete_group=1
      group_names=$1
      ;;
    -d|--destination)
      shift
      target=$1
      ;;
    -s|--sobject)
      shift
      if [ "$object" == "" ]; then
        object=$1
      else
        object="${object},${1}"
      fi
      ;;
    -v|--visidata)
      shift
      object=$1
      visidata=1
      ;;
    -h|--help)
      show_help
      ;;
    *)
      ;;
  esac
  shift
done
setTargetOrg

if [ $(basename $(pwd)) == $default_target ]; then
  target='.'
fi

[ "$DEBUG" == "2" ] && echo -e "\norg: "$org"\ntarget: "$target"\nobject: "$object"\nvisidata: "$visidata"\ngroup_names: "$group_names"\nlist_groups: "$list_groups"\ndelete_group: "$delete_group"\n" | column -t && exit 0

# sf-data -g
if [ -z "$object" ] && [ "$list_groups" == "1" ]; then
  echo -e "\n $(tput setaf 2)Object Groupes$(tput sgr0) in $(tput setaf 0)${group_folder}/$(tput sgr0) folder:"
  while read -r group; do
    echo -e "\n   $(tput setaf 2)${group}$(tput sgr0)"
    cat -n "$group_folder/$group"
  done < <(ls "$group_folder")
  exit 0
fi

# sf-data -G
if [ "$delete_group" == "1" ] && [ -z "$group_names" ]; then
  yesno "Delete $(tput setaf 4)all$(tput sgr0) groups ?"
  rm -r "${group_folder}"
  exit 0
fi

# sf-data -G NAME
if [ "$delete_group" == "1" ] && [ -n "$group_names" ]; then
  yesno "Delete group $(tput setaf 4)${group_names}$(tput sgr0) ?"
  [ ! -f "${group_folder}/${group_names}" ] && print_error_and_exit "Group '${group_names}' does not exist"
  rm "${group_folder}/${group_names}"
  exit 0
fi

# sf-data
if [ -z "$object" ] && [ "$list_groups" == "0" ] && [ -z "$group_names" ]; then
  [ "$DEBUG" == "1" ] && echo -e "   $(tput setaf 0)sf sobject list -o ${org} -s all$(tput sgr0)"
  yesno "Fetch $(tput setaf 4)all$(tput sgr0) data from $(tput setaf 1)${org}$(tput sgr0) ?"
  sf sobject list -o ${org} -s all > "$listfile"
fi

# sf-data -g GROUP
if [ -z "$object" ] && [ "$list_groups" == "0" ] && [ -n "$group_names" ]; then
  while read -r group; do
    [ ! -f "${group_folder}/${group}" ] && print_error_and_exit "Group '${group}' does not exist"
    cat "${group_folder}/${group}" >> "$listfile"
  done < <(echo "$group_names" | tr -d ' ' | tr ',' '\n')
  yesno "Fetch $(cat "$listfile" | perl -pe 's/\n/, /g' | perl -pe 's/, $//' | perl -pe "s/(\w+)/$(tput setaf 4)\1$(tput sgr0)/g") data from $(tput setaf 1)${org}$(tput sgr0) ?"
fi

# sf-data -s OBJECT
if [ -n "$object" ] && [ "$list_groups" == "0" ] && [ -z "$group_names" ]; then
  echo "$object" | tr -d ' ' | tr ',' '\n' > "$listfile"
  yesno "Fetch $(echo ${object} | perl -pe "s/,/, /g" | perl -pe "s/(\w+)/$(tput setaf 4)\1$(tput sgr0)/g") data from $(tput setaf 1)${org}$(tput sgr0) ?"
fi

# sf-data -s OBJECT -g GROUP
if [ -n "$object" ] && [ "$list_groups" == "0" ] && [ -n "$group_names" ]; then
  echo "$object" | tr -d ' ' | tr ',' '\n' > "$listfile"
  cat "$listfile" > "${group_folder}/${group_names}"
  yesno "Fetch $(echo ${object} | perl -pe "s/,/, /g" | perl -pe "s/(\w+)/$(tput setaf 4)\1$(tput sgr0)/g") data from $(tput setaf 1)${org}$(tput sgr0) ?"
fi

[ "$DEBUG" == "1" ] && echo -e "\n   $(tput setaf 0)${listfile}$(tput sgr0)\n"

if [ "$visidata" == "1" ]; then
  echo ""
  [ "$object" == "ContentDocumentLink" ] && print_error_and_exit "ContentDocumentLink requires a filter by a single Id on ContentDocumentId or LinkedEntityId using the equals operator or multiple Id's using the IN operator."
  target=$(mktemp)
  fields_json=$(sf sobject describe -s ${object} -o ${org})
  fields=$(echo "$fields_json" | jq -r '.fields[].name' | paste -sd, -)
  order_by=$(echo "$fields_json" | jq -r '.fields[] | select(.name == "CreatedDate") | " ORDER BY \(.name) DESC"')
  sf data query -q "SELECT ${fields} FROM ${object}${order_by}" -o ${org} -r csv > "${target}"
  vd "${target}"
  exit 0
fi

mkdir -p ${target}
total=$(cat "$listfile" | wc -l | tr -d ' ')
c=0
startTime=$(date +%s)

while read obj; do
  c=$((c+1))
  echo -e "\n $(tput setaf 8)[${c}/${total}]$(tput sgr0) $(tput setaf 4)${obj}$(tput sgr0):"
  [ "$obj" == "ContentDocumentLink" ] && print_error_and_exit "ContentDocumentLink requires a filter by a single Id on ContentDocumentId or LinkedEntityId using the equals operator or multiple Id's using the IN operator."
  fields_json=$(sf sobject describe -s ${obj} -o ${org})
  fields=$(echo "$fields_json" | jq -r '.fields[].name' | paste -sd, -)
  order_by=$(echo "$fields_json" | jq -r '.fields[] | select(.name == "CreatedDate") | " ORDER BY \(.name) DESC"')
  [ "$DEBUG" == "1" ] && echo -e "\n   $(tput setaf 0)sf data query -q \"SELECT ${fields} FROM ${obj}${order_by}\" -o ${org} -r csv$(tput sgr0)\n"
  sf data query -q "SELECT ${fields} FROM ${obj}${order_by}" -o ${org} -r csv 2> /dev/null > ${target}/${obj}.csv
  dataSize=$(csvtk nrow ${target}/${obj}.csv)
  if [ $dataSize == '0' ]; then
    echo -e " ${target}/${obj}.csv: $(tput setaf 1)empty$(tput sgr0)"
  else
    if [[ $dataSize == '1' ]]; then
      echo -e " ${target}/${obj}.csv: $(tput setaf 2)1 record$(tput sgr0)"
    else
      echo -e " ${target}/${obj}.csv: $(tput setaf 2)${dataSize} records$(tput sgr0)"
    fi
  fi
  find ${target}/${obj}.csv -type f -size -2c -delete
done < <(cat "$listfile")

endTime=$(date +%s)
duration=$(date -j -f %s $((endTime - startTime)) +%M:%S)
if [ ! "$duration" == "00:00" ]; then
  echo -e "\n $(tput setaf 0)download duration: ${duration} min$(tput sgr0)\n"
fi
