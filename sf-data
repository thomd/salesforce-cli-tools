#!/usr/bin/env bash

#
# Download data of all or of specific Salesforce objects as csv files
#
# USAGE
#
#     sf-data -o ALIAS                  # query from ALIAS org
#     sf-data -d DIR                    # save data in DIR folder [default: .data]
#     sf-data                           # query all data from default org and save in default folder
#
#     sf-data -s OBJ_1 -s OBJ_2         # query objects OBJ_1 and OBJ_2 and save in DIR
#     sf-data -v OBJ                    # query Object OBJ and open in Visidata
#
#     sf-data -r                        # refresh data in current directory
#
# EXAMPLES
#
#     sf-data -s Account -d .
#     sf-data -s Account -s Contact
#

yesno() {
  echo ""
  read -p "$1 [Y/n] " response
  [[ $response == "n" || $response == "N" ]] && exit 1
}

setTargetOrg() {
  if [[ -z "$org" ]]; then
    org=$(cat .sf/config.json 2>/dev/null | jq -r '."target-org" | select( . != null )')
  fi
  if [[ -z "$org" ]]; then
    org=$(cat ~/.sf/config.json 2>/dev/null | jq -r '."target-org" | select( . != null )')
  fi
  if [[ -z "$org" ]]; then
    echo -e >&2 "\n $(tput setaf 1)Missing target org$(tput sgr 0)\n\n   Either provide with $(tput setaf 0)-o$(tput sgr 0) option, or set via $(tput setaf 0)sf config set target-org <org>$(tput sgr 0)"
    exit 1
  fi
}

org=""
target=".data"
object=""
visidata=false
listfile="object.names"
refresh=false

while [ $# -gt 0 ]; do
  case $1 in
    -o)
      shift
      org=$1
      ;;
    -d)
      shift
      target=$1
      ;;
    -r)
      refresh=true
      ;;
    -s)
      shift
      if [[ $object == "" ]]; then
        object=$1
      else
        object="${object},${1}"
      fi
      ;;
    -v)
      shift
      object=$1
      visidata=true
      ;;
    -h|--help)
      awk '/^[^ #]/{c=1}c==0{print $0}' $0 | sed -n '/^#/p' | sed 1d | sed 's/^#/ /g' \
        | perl -pe "s/ #(.*)$/$(tput setaf 0)\1$(tput sgr 0)/" \
        | perl -pe "s/(USAGE|EXAMPLES)/$(tput setaf 0)\1$(tput sgr 0)/"
      exit 1
      ;;
    *)
      ;;
  esac
  shift
done
setTargetOrg

if [ $refresh == true ]; then
  object=$(fd . ${target} -e csv -x echo {/.} | tr '\n' ',')
  if [[ ${object} == "" ]];then
    echo -e >&2 "\n Folder $(tput setaf 4)${target}$(tput sgr 0) is empty"
    exit 1
  fi
  object=${object::-1}
fi

objects=$(echo ${object} | perl -pe "s/,/, /g" | perl -pe "s/(\w+)/$(tput setaf 4)\1$(tput sgr0)/g")
yesno " Fetch $([[ ${objects} == "" ]] && echo "$(tput setaf 4)all$(tput sgr0)" || echo ${objects}) data from $(tput setaf 1)${org}$(tput sgr0) ?"

if [ $visidata == true ]; then
  echo ""
  target=$(mktemp)
  [[ $DEBUG == "1" ]] && echo -e "   $(tput setaf 0)sf data query -q \"SELECT `sf sobject describe -o ${org} -s ${object} | jq -r '.fields[].name' | paste -sd, -` FROM ${object}\" -o ${org}$(tput sgr0)\n"
  sf data query -q "SELECT `sf sobject describe -o ${org} -s ${object} | jq -r '.fields[].name' | paste -sd, -` FROM ${object}" -o ${org} -r csv > "${target}"
  vd "${target}"
  exit 0
fi

# this is an opinionated list of sobjects which are either not of interest or do not support queries
if [[ $object == "" ]]; then
  sf sobject list -o ${org} -s all \
    | sed /osf/d \
    | sed /Apex/d \
    | sed /RecentlyViewed/d \
    | sed /SetupAuditTrail/d \
    | sed /UserLogin/d \
    | sed /FieldPermissions/d \
    | sed /Event$/d \
    | sed /__e$/d \
    | sed /Vote/d \
    | sed /Access$/d \
    | sed /SiteDetail/d \
    | sed /SearchLayout/d \
    | sed /^Salesforce/d \
    | sed /^Relationship/d \
    | sed /RelatedListDefinition/d \
    | sed /RelatedListColumnDefinition/d \
    | sed /QuoteTemplateRichTextData/d \
    | sed /ProcessInstanceHistory/d \
    | sed /OpenActivity/d \
    | sed /NoteAndAttachment/d \
    | sed /NetworkUserHistoryRecent/d \
    | sed /^Name$/d \
    | sed /LookedUpFromActivity/d \
    | sed /LogoutEventStream/d \
    | sed /ListViewChartInstance/d \
    | sed /IdeaComment/d \
    | sed /IconDefinition/d \
    | sed /FolderedContentDocument/d \
    | sed /^Flow/d \
    | sed /^Feed/d \
    | sed /^Field/d \
    | sed /FlexQueueItem/d \
    | sed /EntityParticle/d \
    | sed /EmailStatus/d \
    | sed /^Data/d \
    | sed /ContentFolderMember/d \
    | sed /ContentFolderItem/d \
    | sed /ContentDocumentLink/d \
    | sed /ContentBody/d \
    | sed /CombinedAttachment/d \
    | sed /ColorDefinition/d \
    | sed /^Attached/d \
    | sed /AsyncOperationStatus/d \
    | sed /AppTabMember/d \
    | sed /AggregateResult/d \
    | sed /ActivityHistory/d \
    | sed /^AI/d \
    | sed /^ML/d \
    | sed /^Incident/d \
    | sed /^Forecasting/d \
    | sed /^Location/d \
    | sed /^Quick/d \
    | sed /^Quote/d \
    | sed /^Scorecard/d \
    | sed /^SocialPost/d \
    | sed /^Stamp/d \
    | sed /^TableauHostMapping/d \
    | sed /^WorkBadge/d \
    | sed /^WorkOrder/d \
    | sed /^WorkPlan/d \
    | sed /^WorkStep/d \
    | sed /^WorkThanks/d \
    | sed /^Reputation/d \
    | sed /OrgLifecycleNotification/d \
    | sed /^OutgoingEmail/d \
    | sed /OwnedContentDocument/d \
    | sed /OwnerChangeOptionInfo/d \
    | sed /PermissionSetTabSetting/d \
    | sed /PicklistValueInfo/d \
    | sed /PlatformAction/d \
    | sed /AuthSession/d \
    | sed /BackgroundOperation/d \
    | sed /CronTrigger/d \
    | sed /EntityDefinition/d \
    | sed /OauthToken/d \
    | sed /UserLicense/d \
    | sed /^AuraDefinition/d \
    | sed /^smartlists__/d \
    > ${listfile}
else
  echo ${object} | tr -d ' ' | tr ',' '\n' > ${listfile}
fi

total=$(cat ${listfile} | wc -l | tr -d ' ')
mkdir -p ${target}
c=0
while read obj; do
  c=$((c+1))
  echo -e "\n $(tput setaf 8)[${c}/${total}]$(tput sgr0) $(tput setaf 4)${obj}$(tput sgr0):"
  fields=$(sf sobject describe -s ${obj} -o ${org} | jq -r '.fields[].name' \
    | sed /MV_Minutes_Since_Modified__c/d \
    | sed /MV_Last_login_days__c/d \
    | sed /LastActivityDate/d \
    | sed /LastViewedDate/d \
    | sed /LastReferencedDate/d \
    | sed /MV_DaysSinceCreated__c/d \
    | paste -sd, -)
  sf data query -q "SELECT ${fields} FROM ${obj}" -o ${org} -r csv > ${target}/${obj}.csv
    wc -l ${target}/${obj}.csv | awk '{if($1 == "0" || $1 == "1"){ print " " $2 ": \033[31mempty" } else { print " " $2 ": \033[32m" $1-1 " records" } }'
    awk 'NR == 1; NR > 1 { print $0 | "sort" }' ${target}/${obj}.csv > ${target}/temp; mv ${target}/temp ${target}/${obj}.csv
    find ${target}/${obj}.csv -type f -size -2c -delete
done < <(cat ${listfile})

rm ${listfile}
