#!/usr/bin/env bash

#
# Given set of csv files (retrieved using 'sf-data'), extract all records related to a given object Id
#
# USAGE
#
#     sf-rel <Id>                                          # extract records related to <id>
#     sf-rel -s <Id>                                       # no output (silent)
#     sf-rel -r                                            # explicitly restore original csv files (they are also restored on every new usage of 'sf-rel')
#
# EXAMPLES
#
#     sf-data; cd .data; sf-rel 0018E000027VckFQAS         # extract records related to the account Id '0018E000027VckFQAS'
#

tmp=$(mktemp)
silent=false

show_help() {
  awk '/^[^ #]/{c=1}c==0{print $0}' $0 | sed -n '/^#/p' | sed 1d | sed 's/^#/ /g' \
    | perl -pe "s/ #(.*)$/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/(USAGE|EXAMPLES)/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/\`(.+)\`/$(tput sgr 0 1)\1$(tput sgr 0)/"
  exit 1
}

[[ -z "$1" ]] && show_help

while [ $# -gt 0 ]; do
  case $1 in
    -r)
      fd -e orig -x mv {} {.}
      exit 0
      ;;
    -s)
      silent=true
      ;;
    -h|--help)
      show_help
      ;;
    *)
      ;;
  esac
  id=$1
  shift
done

# restore & backup 'object.csv' to 'object.csv.orig'
fd -e orig -x mv {} {.}
while read f; do
  [ ! -f "${f}.orig" ] && cp "$f" "${f}.orig"
done < <(fd -I -e csv)

# remove some Id-columns we are not interested in
while read f; do
  csvtk cut -m -f -OwnerId,-CreatedById,-LastModifiedById,-RecordTypeId,-ProfileId "$f" > ${tmp}
  mv ${tmp} "$f"
done < <(fd -I -e csv)

# extract related records (all records having the given Id in a column) from all available csv files
while read f; do
  cat "$f" | awk -v id=$id '$0 ~ id || NR==1{print $0}' > ${tmp}
  lines=$(wc -l ${tmp} | awk '{print $1}')
  if [[ ${lines} == 1 ]]; then
    rm "$f"
  else
    mv ${tmp} "$f"
    [ $silent == false ] && echo "extracted $(tput setaf 4)${f}$(tput sgr 0)"
  fi
done < <(fd -I -e csv)

# draw diagram
if [ $silent == false ]; then
  while read -r f; do
    while read -r col; do
      if [[ "$col" == "Id" ]]; then
        sobj="${f%.*}"
        break 2
      fi
    done < <(csvtk transpose "$f" | rg "$id" | csvtk cut -f 1)
  done < <(fd -I -e csv)

  dotfile="rel_${id}.dot"
  echo "digraph {" > $dotfile

  while read -r f; do
    obj=${f%.*}
    if [[ "$obj" == "$sobj" ]]; then
      dot="${obj} [ label = \"@${obj}"
    else
      dot="${obj} [ label = \"#${obj}"
    fi
    if [[ ! "$obj" == "$sobj" ]]; then
      dot="${dot} \\n Id:~$(csvtk transpose "$f" | rg "^Id," | csvtk cut -f 2)"
    fi
    while read -r col; do
      dot="${dot} \\n $(echo ${col} | csvtk cut -f 1):~$(echo ${col} | csvtk cut -f 2)"
    done < <(csvtk transpose "$f" | rg "$id")
    echo "${dot}\" ]" >> $dotfile
    if [[ ! "$obj" == "$sobj" ]]; then
      echo "${obj} -- ${sobj}" >> $dotfile
    fi
  done < <(fd -I -e csv)
  echo "}" >> $dotfile
  echo
  cat $dotfile \
    | graph-easy --from=dot --as=boxart \
    | perl -pe "s/@(.+?) / $(tput setaf 1)\1$(tput sgr 0) /g" \
    | perl -pe "s/#(.+?) / $(tput setaf 2)\1$(tput sgr 0) /g" \
    | perl -pe "s/~(.+?) / $(tput setaf 0)\1$(tput sgr 0) /g"
fi
