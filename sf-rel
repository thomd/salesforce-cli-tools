#!/usr/bin/env bash

#
# given set of csv files (e.g. retrieved using 'sf-data'), extract all records related to a given object id
#
# USAGE
#
#     sf-rel <id>                                      # extract records related to <id>
#     sf-rel -l 2                                      # extract down to level 2 [default: 1]
#     sf-rel -r                                        # restore original csv files
#
# EXAMPLES
#
#     sf-data -s Account -s User -s Contact -d .       # download data into current directory
#     sf-rel 0018E000027VckFQAS                        # extract records related to the account-id
#

level=1
id=000000000000000000
ids=''
rel_ids=$(mktemp)
tmp=$(mktemp)
dotfile="relations.dot"

while [ $# -gt 0 ]; do
  case $1 in
    -r)
      rm $dotfile
      fd -e orig -x mv {} {.}
      fd -e csv
      exit 1
      ;;
    -l)
      shift
      level=$1
      ;;
    -h|--help)
      awk '/^[^ #]/{c=1}c==0{print $0}' $0 | sed -n '/^#/p' | sed 1d | sed 's/^#/ /g' \
        | perl -pe "s/ #(.*)$/$(tput setaf 0)\1$(tput sgr 0)/" \
        | perl -pe "s/(USAGE|EXAMPLES)/$(tput setaf 0)\1$(tput sgr 0)/" \
        | perl -pe "s/\`(.+)\`/$(tput sgr 0 1)\1$(tput sgr 0)/"
      exit 1
      ;;
    *)
      ;;
  esac
  id=$1
  shift
done

if [ $id == '000' ]; then
  echo -e "\n $(tput setaf 1)ID missing$(tput sgr 0)"
  exit 1
fi

# backup
while read f; do
  [ ! -f "${f}.orig" ] && cp "$f" "${f}.orig"
done < <(fd -I -e csv)

# remove some columns we are not interested in
while read f; do
  cols=("OwnerId" "CreatedById" "LastModifiedById" "RecordTypeId" "ProfileId")
  for col in ${cols[@]}
  do
    csvcut -n "$f" | rg "\b${col}\b" > /dev/null
    if [ $? == 0 ]; then
      csvcut -C "$col" "$f" > ${tmp}
      mv ${tmp} "$f"
    fi
  done
done < <(fd -I -e csv)

# extract all IDs down to the given level
if [ $level == 2 ]; then
  while read f; do
    cat "$f" | awk -v id=$id '$0 ~ id {print $0}' | tr ',' '\n' | perl -ne 'print if /^[0-9a-zA-Z]{18}$/' >> ${rel_ids}
  done < <(fd -I -e csv)
  ids=$(cat ${rel_ids} | sort | uniq | tr '\n' '|')
  ids=${ids%|}
else
  ids=${id}
fi

# extract related records from the available csv files
while read f; do
  cat "$f" | awk -v id=$ids '$0 ~ id || NR==1{print $0}' > ${tmp}
  lines=$(wc -l ${tmp} | awk '{print $1}')
  if [[ ${lines} == 1 ]]; then
    rm "$f"
  else
    mv ${tmp} "$f"
    echo "extracted $(tput setaf 4)${f}$(tput sgr 0)"
  fi
done < <(fd -I -e csv)

# draw diagram
ids=${id}
while read -r f; do
  while read -r col; do
    if [[ "$col" == "Id" ]]; then
      sobj="${f%.*}"
    fi
  done < <(csvtk transpose "$f" | rg "$ids" | csvtk cut -f 1)
done < <(fd -I -e csv)
echo "digraph {" > $dotfile
echo "rankdir = LR" >> $dotfile
while read -r f; do
  obj=${f%.*}
  dot="${obj} [ label = \"${obj}"
  while read -r col; do
    dot="${dot} \\n $(echo ${col} | csvtk cut -f 1): $(echo ${col} | csvtk cut -f 2)"
  done < <(csvtk transpose "$f" | rg "$ids")
  echo "${dot}\" ]" >> $dotfile
  if [[ ! "$obj" == "$sobj" ]]; then
    echo "${obj} -- ${sobj}" >> $dotfile
  fi
done < <(fd -I -e csv)
echo "}" >> $dotfile
echo
cat $dotfile | graph-easy --from=dot --as=boxart | perl -pe "s/(${ids})/$(tput setaf 0)\1$(tput sgr 0)/g" | perl -pe "s/( ${sobj} )/$(tput setaf 2)\1$(tput sgr 0)/g"

