#!/usr/bin/env bash

#
# Inspect local custom-labels and permissions
#
# USAGE
#
#     sf-inspect labels               # list custom-labels on local metadata, package-manifest, translation-files and usage
#     sf-inspect permissions          # compare settings of locally managed profiles and permission-sets
#     sf-inspect -d DIR               # save generated csv file in DIR folder [default: .data]
#
# EXAMPLES
#
#     sf-metadata -m CustomLabels
#     sf-inspect labels

yesno() {
  echo ""
  read -p "$1 [Y/n] " response
  [[ $response == "n" || $response == "N" ]] && exit 1
}

show_help() {
  awk '/^[^ #]/{c=1}c==0{print $0}' $0 | sed -n '/^#/p' | sed 1d | sed 's/^#/ /g' \
    | perl -pe "s/ #(.*)$/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/(USAGE|EXAMPLES|COMMANDS)/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/\`(.+)\`/$(tput sgr 0 1)\1$(tput sgr 0)/"
  exit 1
}

write_permissions() {
  case "$1" in
    applicationVisibilities*)
      xml sel -N sf="$sfns" -t -m "//sf:applicationVisibilities" \
        -o "applicationVisibilities:" -v "sf:application/text()" -o ",default: " -v "sf:default/text()" -o " | visible: " -v "sf:visible/text()" \
        -n "$path" >> "$2"
      ;;
    classAccesses*)
      xml sel -N sf="$sfns" -t -m "//sf:classAccesses" \
        -o "classAccesses:" -v "sf:apexClass/text()" -o ",enabled: " -v "sf:enabled/text()" \
        -n "$path" >> "$2"
      ;;
    customMetadataTypeAccesses*)
      xml sel -N sf="$sfns" -t -m "//sf:customMetadataTypeAccesses" \
        -o "customMetadataTypeAccesses:" -v "sf:name/text()" -o ",enabled: " -v "sf:enabled/text()" \
        -n "$path" >> "$2"
      ;;
    customPermissions*)
      xml sel -N sf="$sfns" -t -m "//sf:customPermissions" \
        -o "customPermissions:" -v "sf:name/text()" -o ",enabled: " -v "sf:enabled/text()" \
        -n "$path" >> "$2"
      ;;
    customSettingAccesses*)
      xml sel -N sf="$sfns" -t -m "//sf:customSettingAccesses" \
        -o "customSettingAccesses:" -v "sf:name/text()" -o ",enabled: " -v "sf:enabled/text()" \
        -n "$path" >> "$2"
      ;;
    externalCredentialPrincipalAccesses*)
      xml sel -N sf="$sfns" -t -m "//sf:externalCredentialPrincipalAccesses" \
        -o "externalCredentialPrincipalAccesses:" -v "sf:externalCredentialPrincipal/text()" -o ",enabled: " -v "sf:enabled/text()" \
        -n "$path" >> "$2"
      ;;
    flowAccesses*)
      xml sel -N sf="$sfns" -t -m "//sf:flowAccesses" \
        -o "flowAccesses:" -v "sf:flow/text()" -o ",enabled: " -v "sf:enabled/text()" \
        -n "$path" >> "$2"
      ;;
    fieldPermissions*)
      xml sel -N sf="$sfns" -t -m "//sf:fieldPermissions" \
        -o "fieldPermissions:" -v "sf:field/text()" -o ",editable: " -v "sf:editable/text()" -o " | readable: " -v "sf:readable/text()" \
        -n "$path" >> "$2"
      ;;
    layoutAssignments*)
      xml sel -N sf="$sfns" -t -m "//sf:layoutAssignments" \
        -o "layoutAssignments:" -v "sf:layout/text()" -o ",X" \
        -n "$path" >> "$2"
      ;;
    objectPermissions*)
      xml sel -N sf="$sfns" -t -m "//sf:objectPermissions" \
        -o "objectPermissions:" -v "sf:object/text()" -o ",create: " -v "sf:allowCreate/text()" \
        -o " | delete: " -v "sf:allowDelete/text()" \
        -o " | edit: " -v "sf:allowEdit/text()" \
        -o " | read: " -v "sf:allowRead/text()" \
        -o " | modifyAll: " -v "sf:modifyAllRecords/text()" \
        -o " | viewAll: " -v "sf:viewAllRecords/text()" \
        -n "$path" >> "$2"
      ;;
    pageAccesses*)
      xml sel -N sf="$sfns" -t -m "//sf:pageAccesses" \
        -o "pageAccesses:" -v "sf:apexPage/text()" -o ",enabled: " -v "sf:enabled/text()" \
        -n "$path" >> "$2"
      ;;
    recordTypeVisibilities*)
      xml sel -N sf="$sfns" -t -m "//sf:recordTypeVisibilities" \
        -o "recordTypeVisibilities:" -v "sf:recordType/text()" -o ",default: " -v "sf:default/text()" -o " | visible: " -v "sf:visible/text()" \
        -n "$path" >> "$2"
      ;;
    tabVisibilities*)
      xml sel -N sf="$sfns" -t -m "//sf:tabVisibilities" \
        -o "tabVisibilities:" -v "sf:tab/text()" -o ",visibility: " -v "sf:visibility/text()" \
        -n "$path" >> "$2"
      ;;
    custom*)
      xml sel -N sf="$sfns" -t -m "//sf:custom" \
        -o "custom:" -o "," -v "text()" \
        -n "$path" >> "$2"
      ;;
    userLicense*)
      xml sel -N sf="$sfns" -t -m "//sf:userLicense" \
        -o "userLicense:" -o "," -v "text()" \
        -n "$path" >> "$2"
      ;;
    userPermissions*)
      xml sel -N sf="$sfns" -t -m "//sf:userPermissions" \
        -o "userPermissions:" -v "sf:name/text()" -o ",enabled: " -v "sf:enabled/text()" \
        -n "$path" >> "$2"
      ;;
  esac
}

target=".data"
labels=false
permissions=false
sfns="http://soap.sforce.com/2006/04/metadata"

[[ -z "$1" ]] && show_help
[ ! -f "./sfdx-project.json" ] && echo >&2 "not a SFDX project!" && exit 1

while [ $# -gt 0 ]; do
  case $1 in
    -d)
      shift
      target=$1
      ;;
    labels)
      labels=true
      ;;
    permissions)
      permissions=true
      ;;
    -h|--help)
      show_help
      ;;
    *)
      ;;
  esac
  shift
done
mkdir -p "$target"

if [[ $labels == true ]]; then
  yesno " Inspect $(tput setaf 4)Custom Labels$(tput sgr0) and $(tput setaf 4)Translations$(tput sgr0) of local $(tput setaf 1)SFDX project$(tput sgr0) ?"

  labelsfile="${target}/labels.csv"
  echo "\"Label\",\"en_US\"" > "$labelsfile"
  cat force-app/main/default/labels/CustomLabels.labels-meta.xml \
    | sed "s#&quot;#'#g" \
    | sed "s#\"#'#g" \
    | xml sel -N sf="http://soap.sforce.com/2006/04/metadata" \
        -t -m "//sf:labels" \
        --var linebreak -n --break \
        -o "\"" -v "sf:fullName/text()" -o "\",\"" -v "translate(sf:value/text(), \$linebreak , ' ')" -o "\"" -n \
    >> "$labelsfile"

  while read -r path; do
    file="$(basename $path)"
    lang="${file%%.*}"
    translationsfile="${target}/translation_${lang}.csv"
    echo "\"Label\",\"${lang}\"" > "${translationsfile}"
    cat "$path" \
      | sed "s#&quot;#'#g" \
      | sed "s#\"#'#g" \
      | xml sel -N sf="http://soap.sforce.com/2006/04/metadata" \
        -t -m "//sf:customLabels" \
        --var linebreak -n --break \
        -o "\"" -v "sf:name/text()" -o "\",\"" -v "translate(sf:label/text(), \$linebreak, ' ')" -o "\"" -n \
      >> "$translationsfile"
    csvtk join -l -f 1 "$labelsfile" "$translationsfile" --outer-join > temp; mv temp "$labelsfile"
    rm "$translationsfile"
  done < <(fd -e xml . force-app/main/default/translations -E '*en_US*')

  manifestfile="${target}/manifest.csv"
  echo "\"Label\",\"Manifest\"" > "$manifestfile"
  cat manifest/package.xml \
    | xml sel -N sf="http://soap.sforce.com/2006/04/metadata" \
        -t -m "//sf:types[sf:name='CustomLabel']" \
        -v "sf:members/text()" -n \
    | sed "s/$/,X/g" \
    >> "$manifestfile"
  csvtk join -l -f 1 "$labelsfile" "$manifestfile" --outer-join > temp; mv temp "$labelsfile"
  rm "$manifestfile"

  usagefile="${target}/usage.csv"
  echo "\"Label\",\"Usage\"" > "$usagefile"
  while read label; do
    echo "${label},$(rg -g '!{force-app/main/default/translations/*,force-app/main/default/labels/*}' -l -w ${label} force-app | wc -l | tr -d ' ')" >> "$usagefile"
  done < <(csvtk cut -f "Label" "$labelsfile" | sed 1d)
  csvtk join -l -f 1 "$labelsfile" "$usagefile" --outer-join > temp; mv temp "$labelsfile"
  rm "$usagefile"
  vd "$labelsfile"
  exit 0
fi

if [[ $permissions == true ]]; then
  yesno " Inspect $(tput setaf 4)Profiles$(tput sgr0) and $(tput setaf 4)Permission Sets$(tput sgr0) of local $(tput setaf 1)SFDX project$(tput sgr0) ?"

  permissionsfile="${target}/permissions.csv"

  while read -r path; do
    file="$(basename "$path")"
    name="${file%%.*}"
    profilefile="${target}/profile_${name// /_}.csv"
    echo "\"section:value\",\"${name}\"" > "$profilefile"
    while read -r section; do
      write_permissions $section $profilefile
    done < <(xml sel -N sf="$sfns" -t -m "//sf:Profile/child::node()" -v "name()" -n "$path" | sort | uniq | sed /^$/d)
  done < <(fd -e xml . force-app/main/default/profiles)

  while read -r path; do
    file="$(basename "$path")"
    name="${file%%.*}"
    permissionsetfile="${target}/permissionset_${name// /_}.csv"
    echo "\"section:value\",\"${name}\"" > "$permissionsetfile"
    while read -r section; do
      write_permissions $section $permissionsetfile
    done < <(xml sel -N sf="$sfns" -t -m "//sf:PermissionSet/child::node()" -v "name()" -n "$path" | sort | uniq | sed /^$/d)
  done < <(fd -e xml . force-app/main/default/permissionsets)

  csvtk join -l -f 1 $(fd -e csv "profile_" ${target}) $(fd -e csv "permissionset_" ${target}) --outer-join > "$permissionsfile"
  fd -e csv "profile_" ${target} -X rm
  fd -e csv "permissionset_" ${target} -X rm
  vd "$permissionsfile"
  exit 0
fi

exit 0
